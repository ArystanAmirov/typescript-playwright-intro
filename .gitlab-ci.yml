# stages:
#   - test
#   - upload_results

# playwright_tests:
#   stage: test
#   image: mcr.microsoft.com/playwright:v1.49.0-noble
#   script:
#     - npm ci
#     - npx playwright install chromium
#     - npx playwright test || true
#   artifacts:
#     when: always
#     paths:
#       - test-results/junit-report.xml
#       - playwright-report/
#     expire_in: 4 days
#   allow_failure: true

# upload_zephyr_results:
#   stage: upload_results
#   image: ubuntu:20.04
#   dependencies:
#     - playwright_tests
#   before_script:
#     - apt-get update && apt-get install -y curl xmlstarlet bc
#   script:
#     - |
#       xmlstarlet --version
#       if [ ! -f "test-results/junit-report.xml" ]; then
#         echo "JUnit report not found. Skipping upload."
#         exit 0
#       fi
      
#       xmlstarlet sel -t -m "//testcase[contains(@name, '[TEST-T')]" \
#         -v "substring-before(substring-after(@name, '[TEST-'), ']')" -o "|" \
#         -i "count(failure)=0" -o "Pass" -b -i "count(failure)>0" -o "Fail" -b -o "|" \
#         -v "@time" -o "|" \
#         -i "count(failure)=0" -o "" -b \
#         -i "count(failure)>0" -v "normalize-space(failure)" -b -n test-results/junit-report.xml > parsed_tests.txt 2> xmlstarlet_error.log
#       echo "xmlstarlet errors (if any):"
#       cat xmlstarlet_error.log
#       echo "Parsed tests content:"
#       cat parsed_tests.txt
#       if [ ! -s parsed_tests.txt ]; then
#         echo "No matching tests found in JUnit report."
#         exit 0
#       fi
#       while IFS='|' read -r test_key status time error_message; do
#         if [ -z "$test_key" ] || [ -z "$status" ]; then
#           echo "Skipping invalid test: test_key=$test_key, status=$status"
#           continue
#         fi
#         if ! echo "$test_key" | grep -q '^T[0-9]\+$'; then
#           echo "Skipping invalid test_key format: $test_key"
#           continue
#         fi
#         echo "Processing test: $test_key, status: $status, time: $time"
#         echo "Error message: $error_message"
#         execution_time=0
#         if [ -n "$time" ] && echo "$time" | grep -q '^[0-9]*\.\?[0-9]*$'; then
#           execution_time=$(echo "$time * 1000" | bc | awk '{print int($1)}')
#         fi
#         current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
#         if [ "$status" = "Pass" ]; then
#           comment="Automated test executed via GitLab CI"
#         else
#           error_message=$(echo "$error_message" | head -c 4000 | sed 's/"/\\"/g; s/\\/\\\\/g; s/\n/ /g; s/\t/ /g')
#           comment="Test failed: ${error_message:-No error details available}"
#         fi
#         echo "Comment for $test_key: $comment"
#         response=$(curl -s -w "\n%{http_code}" -X POST \
#           -H "Authorization: Bearer $ZEPHYR_AUTH_TOKEN" \
#           -H "Content-Type: application/json" \
#           "https://api.zephyrscale.smartbear.com/v2/testexecutions" \
#           -d "{
#             \"projectKey\": \"TEST\",
#             \"testCaseKey\": \"TEST-$test_key\",
#             \"testCycleKey\": \"TEST-R6\",
#             \"statusName\": \"$status\",
#             \"environmentName\": \"Pre-Prod\",
#             \"actualEndDate\": \"$current_time\",
#             \"executionTime\": $execution_time,
#             \"comment\": \"$comment\",
#             \"assignedToId\": \"712020:a5b288d6-14e6-41a5-b964-35f53cbeb28c\",
#             \"executedById\": \"712020:a5b288d6-14e6-41a5-b964-35f53cbeb28c\"
#           }")
#         http_code=$(printf '%s' "$response" | tail -n1)
#         if [ "$http_code" -ne 201 ]; then
#           echo "Failed to upload test $test_key to Zephyr Scale. HTTP code: $http_code"
#           echo "Response: $response"
#           exit 1
#         fi
#       done < parsed_tests.txt

stages:
  - test
  - upload_results

playwright_tests:
  stage: test
  image: mcr.microsoft.com/playwright:v1.49.0-noble
  script:
    - npm ci
    - npx playwright install chromium
    - npx playwright test || true
    - echo "TEST_JOB_ID=$CI_JOB_ID" > test_job_id.env
  artifacts:
    when: always
    paths:
      - test-results/junit-report.xml
      - test_job_id.env
      - playwright-report/
    expire_in: 4 days
  allow_failure: true

upload_zephyr_results:
  stage: upload_results
  image: ubuntu:20.04
  dependencies:
    - playwright_tests
  before_script:
    - apt-get update && apt-get install -y curl xmlstarlet bc
  script:
    - |
      xmlstarlet --version
      if [ ! -f "test-results/junit-report.xml" ]; then
        echo "JUnit report not found. Skipping upload."
        exit 0
      fi
      xmlstarlet sel -t -m "//testcase[contains(@name, '[TEST-T')]" \
        -v "substring-before(substring-after(@name, '[TEST-'), ']')" -o "|" \
        -i "count(failure)=0" -o "Pass" -b -i "count(failure)>0" -o "Fail" -b -o "|" \
        -v "@time" -o "|" \
        -i "count(failure)=0" -o "" -b \
        -i "count(failure)>0" -v "normalize-space(failure)" -b -n test-results/junit-report.xml > parsed_tests.txt 2> xmlstarlet_error.log
      echo "xmlstarlet errors (if any):"
      cat xmlstarlet_error.log
      echo "Parsed tests content:"
      cat parsed_tests.txt
      if [ ! -s parsed_tests.txt ]; then
        echo "No matching tests found in JUnit report."
        exit 0
      fi
      source test_job_id.env
      report_url="https://$CI_PROJECT_ROOT_NAMESPACE.gitlab.io/-/$CI_PROJECT_NAME/-/jobs/$TEST_JOB_ID/artifacts/playwright-report/index.html"
      echo "Report URL: $report_url"
      while IFS='|' read -r test_key status time error_message; do
        if [ -z "$test_key" ] || [ -z "$status" ]; then
          echo "Skipping invalid test: test_key=$test_key, status=$status"
          continue
        fi
        if ! echo "$test_key" | grep -q '^T[0-9]\+$'; then
          echo "Skipping invalid test_key format: $test_key"
          continue
        fi
        echo "Processing test: $test_key, status: $status, time: $time"
        execution_time=0
        if [ -n "$time" ] && echo "$time" | grep -q '^[0-9]*\.\?[0-9]*$'; then
          execution_time=$(echo "$time * 1000" | bc | awk '{print int($1)}')
        fi
        current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        response=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Authorization: Bearer $ZEPHYR_AUTH_TOKEN" \
          -H "Content-Type: application/json" \
          "https://api.zephyrscale.smartbear.com/v2/testexecutions" \
          -d "{
            \"projectKey\": \"TEST\",
            \"testCaseKey\": \"TEST-$test_key\",
            \"testCycleKey\": \"TEST-R7\",
            \"statusName\": \"$status\",
            \"environmentName\": \"Pre-Prod\",
            \"actualEndDate\": \"$current_time\",
            \"executionTime\": $execution_time,
            \"comment\": \"<a href=\\\"$report_url\\\">$report_url</a>\",
            \"assignedToId\": \"712020:a5b288d6-14e6-41a5-b964-35f53cbeb28c\",
            \"executedById\": \"712020:a5b288d6-14e6-41a5-b964-35f53cbeb28c\"
          }")
        http_code=$(printf '%s' "$response" | tail -n1)
        if [ "$http_code" -ne 201 ]; then
          echo "Failed to upload test $test_key to Zephyr Scale. HTTP code: $http_code"
          echo "Response: $response"
          exit 1
        fi
      done < parsed_tests.txt